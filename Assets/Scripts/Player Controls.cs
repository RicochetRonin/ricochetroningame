//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Control Schemes/Player.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player"",
    ""maps"": [
        {
            ""name"": ""Aiming"",
            ""id"": ""f4db1a76-b62e-4627-ad8a-3800a6949d4a"",
            ""actions"": [
                {
                    ""name"": ""Gamepad"",
                    ""type"": ""Value"",
                    ""id"": ""7bdbda4d-6f07-4c5c-bc8e-de6d7d72f42e"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Mouse"",
                    ""type"": ""Value"",
                    ""id"": ""d00978a1-45f0-4c8e-a4e7-5d70d5e49639"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3829fa51-6db3-4de1-90e2-58362ba8752a"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gamepad"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3ba23ebc-4349-4254-8075-913fa6cf5b10"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Moving"",
            ""id"": ""2a5b2d4b-8b72-4329-887b-0175f9592f7f"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""4d69b009-f0f0-41a7-8f2a-657d4e434799"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9da6bec7-02cc-4678-8011-227a249de699"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Attacking"",
            ""id"": ""d2e792a3-566c-4d82-8c8b-10805fcfba52"",
            ""actions"": [
                {
                    ""name"": ""Gamepad"",
                    ""type"": ""Button"",
                    ""id"": ""cb895ed9-c51d-4b3e-a666-0ac4f51231a7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mouse"",
                    ""type"": ""Button"",
                    ""id"": ""cb7cc7b7-ce0c-4871-b6fb-54828468d5b6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2ff505b2-c3c3-4188-97f6-4c29096ac974"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gamepad"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bd858a80-2d19-42ad-92e5-15c43aec0484"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Aiming
        m_Aiming = asset.FindActionMap("Aiming", throwIfNotFound: true);
        m_Aiming_Gamepad = m_Aiming.FindAction("Gamepad", throwIfNotFound: true);
        m_Aiming_Mouse = m_Aiming.FindAction("Mouse", throwIfNotFound: true);
        // Moving
        m_Moving = asset.FindActionMap("Moving", throwIfNotFound: true);
        m_Moving_Newaction = m_Moving.FindAction("New action", throwIfNotFound: true);
        // Attacking
        m_Attacking = asset.FindActionMap("Attacking", throwIfNotFound: true);
        m_Attacking_Gamepad = m_Attacking.FindAction("Gamepad", throwIfNotFound: true);
        m_Attacking_Mouse = m_Attacking.FindAction("Mouse", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Aiming
    private readonly InputActionMap m_Aiming;
    private IAimingActions m_AimingActionsCallbackInterface;
    private readonly InputAction m_Aiming_Gamepad;
    private readonly InputAction m_Aiming_Mouse;
    public struct AimingActions
    {
        private @PlayerControls m_Wrapper;
        public AimingActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Gamepad => m_Wrapper.m_Aiming_Gamepad;
        public InputAction @Mouse => m_Wrapper.m_Aiming_Mouse;
        public InputActionMap Get() { return m_Wrapper.m_Aiming; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AimingActions set) { return set.Get(); }
        public void SetCallbacks(IAimingActions instance)
        {
            if (m_Wrapper.m_AimingActionsCallbackInterface != null)
            {
                @Gamepad.started -= m_Wrapper.m_AimingActionsCallbackInterface.OnGamepad;
                @Gamepad.performed -= m_Wrapper.m_AimingActionsCallbackInterface.OnGamepad;
                @Gamepad.canceled -= m_Wrapper.m_AimingActionsCallbackInterface.OnGamepad;
                @Mouse.started -= m_Wrapper.m_AimingActionsCallbackInterface.OnMouse;
                @Mouse.performed -= m_Wrapper.m_AimingActionsCallbackInterface.OnMouse;
                @Mouse.canceled -= m_Wrapper.m_AimingActionsCallbackInterface.OnMouse;
            }
            m_Wrapper.m_AimingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Gamepad.started += instance.OnGamepad;
                @Gamepad.performed += instance.OnGamepad;
                @Gamepad.canceled += instance.OnGamepad;
                @Mouse.started += instance.OnMouse;
                @Mouse.performed += instance.OnMouse;
                @Mouse.canceled += instance.OnMouse;
            }
        }
    }
    public AimingActions @Aiming => new AimingActions(this);

    // Moving
    private readonly InputActionMap m_Moving;
    private IMovingActions m_MovingActionsCallbackInterface;
    private readonly InputAction m_Moving_Newaction;
    public struct MovingActions
    {
        private @PlayerControls m_Wrapper;
        public MovingActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Moving_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Moving; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovingActions set) { return set.Get(); }
        public void SetCallbacks(IMovingActions instance)
        {
            if (m_Wrapper.m_MovingActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_MovingActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_MovingActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_MovingActionsCallbackInterface.OnNewaction;
            }
            m_Wrapper.m_MovingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }
        }
    }
    public MovingActions @Moving => new MovingActions(this);

    // Attacking
    private readonly InputActionMap m_Attacking;
    private IAttackingActions m_AttackingActionsCallbackInterface;
    private readonly InputAction m_Attacking_Gamepad;
    private readonly InputAction m_Attacking_Mouse;
    public struct AttackingActions
    {
        private @PlayerControls m_Wrapper;
        public AttackingActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Gamepad => m_Wrapper.m_Attacking_Gamepad;
        public InputAction @Mouse => m_Wrapper.m_Attacking_Mouse;
        public InputActionMap Get() { return m_Wrapper.m_Attacking; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AttackingActions set) { return set.Get(); }
        public void SetCallbacks(IAttackingActions instance)
        {
            if (m_Wrapper.m_AttackingActionsCallbackInterface != null)
            {
                @Gamepad.started -= m_Wrapper.m_AttackingActionsCallbackInterface.OnGamepad;
                @Gamepad.performed -= m_Wrapper.m_AttackingActionsCallbackInterface.OnGamepad;
                @Gamepad.canceled -= m_Wrapper.m_AttackingActionsCallbackInterface.OnGamepad;
                @Mouse.started -= m_Wrapper.m_AttackingActionsCallbackInterface.OnMouse;
                @Mouse.performed -= m_Wrapper.m_AttackingActionsCallbackInterface.OnMouse;
                @Mouse.canceled -= m_Wrapper.m_AttackingActionsCallbackInterface.OnMouse;
            }
            m_Wrapper.m_AttackingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Gamepad.started += instance.OnGamepad;
                @Gamepad.performed += instance.OnGamepad;
                @Gamepad.canceled += instance.OnGamepad;
                @Mouse.started += instance.OnMouse;
                @Mouse.performed += instance.OnMouse;
                @Mouse.canceled += instance.OnMouse;
            }
        }
    }
    public AttackingActions @Attacking => new AttackingActions(this);
    public interface IAimingActions
    {
        void OnGamepad(InputAction.CallbackContext context);
        void OnMouse(InputAction.CallbackContext context);
    }
    public interface IMovingActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IAttackingActions
    {
        void OnGamepad(InputAction.CallbackContext context);
        void OnMouse(InputAction.CallbackContext context);
    }
}
